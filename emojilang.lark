stmt: (_simple_stmt | _compound_stmt)* NEWLINE

_simple_stmt: _small_stmt

_small_stmt: assignment_stmt | flow_stmt | print_stmt | declare_stmt

assignment_stmt: name "=" (exp | test)

declare_stmt: "decl" (_multipleassignment_stmt | name) ("," (_multipleassignment_stmt | name))*

flow_stmt: break_stmt | continue_stmt

break_stmt: "break"

continue_stmt: "continue"

print_stmt: "print" "(" (ESCAPED_STRING | exp) ")" 

_compound_stmt: if_stmt | while_stmt | for_stmt

if_stmt: "if" "(" test ")" "{" _suite "}" ("elif" "(" test ")"  "{" _suite "}")* ("else" "{" _suite "}")?

while_stmt: "while" "(" test ")" "{" _suite "}"

for_stmt: "for" "(" (declare_stmt | assignment_stmt)? ";" test? ";" _multipleassignment_stmt? ")" "{" _suite "}"

_multipleassignment_stmt: assignment_stmt ("," assignment_stmt)?

_suite: stmt*

exp: multiplyexp ((EPLUS|EMINUS) multiplyexp)*

multiplyexp: _argument ((EMULT|EDIVIDE) _argument)*

test: exp (_comp_op exp)*

_comp_op: ELESS | EGREA | EEQU | EGREAE | ELESSE | ENOTEQ

_argument: name|number|("(" exp ")")






name: /[a-zA-z_][a-zA-Z0-9_]*/
%import common.SIGNED_NUMBER
%import common.WS
%import common.NEWLINE
%import common.ESCAPED_STRING
number: SIGNED_NUMBER
EPLUS: "+"
EMINUS: "-"
EMULT: "*"
EDIVIDE: "/"
ELESS: "<"
EGREA: ">"
EEQU: "=="
EGREAE: ">="
ELESSE: "<="
ENOTEQ: "!="
%ignore WS