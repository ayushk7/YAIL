stmt: (_simple_stmt | _compound_stmt)* NEWLINE

_simple_stmt: _small_stmt

_small_stmt: assignment_stmt | flow_stmt | print_stmt | declare_stmt

assignment_stmt: name "=" exp

declare_stmt: "decl" (_multipleassignment_stmt | name) ("," (_multipleassignment_stmt | name))*

flow_stmt: break_stmt | continue_stmt

break_stmt: "break"

continue_stmt: "continue"

print_stmt: "print" "(" (ESCAPED_STRING | exp) ")" 

_compound_stmt: if_stmt | while_stmt | for_stmt

if_stmt: EIF "(" exp ")" "{" suite "}" (EELIF "(" exp ")"  "{" suite "}")* (EELSE "{" suite "}")?

while_stmt: "while" "(" for_test ")" "{" suite "}"

for_stmt: "for" "(" for_decl ";" for_test";" for_updates ")" "{" suite "}"

for_decl: (declare_stmt | assignment_stmt)?

for_test: exp?

for_updates: _multipleassignment_stmt?

_multipleassignment_stmt: assignment_stmt ("," assignment_stmt)?

suite: (_simple_stmt | _compound_stmt)* NEWLINE




?castexpression: (_unaryoperator?)_argument

?multiplicativeexpression: castexpression ((EMULT|EDIVIDE|EMOD) castexpression)*

?additiveexpression: multiplicativeexpression ((EPLUS|EMINUS) multiplicativeexpression)*

?equalityexpression: additiveexpression ((EEQU|ENOTEQ|ELESS|EGREA|EGREAE|ELESSE) additiveexpression)*

?andexpression: equalityexpression ((EAND) equalityexpression)*

?exclusiveorexpression: andexpression ((EXOR) andexpression)*

?inclusiveorexpression: exclusiveorexpression ((EOR) exclusiveorexpression)*

?logicalandexpression: inclusiveorexpression ((ELAND) inclusiveorexpression)*

?logicalorexpression: logicalandexpression ((ELOR) logicalandexpression)*

exp: logicalorexpression






_unaryoperator: (ENOT|ECOMPLEMENT)

_argument: boolean | number | name|("(" exp ")")

boolean: ETRUE | EFALSE
name: /[a-zA-z_][a-zA-Z0-9_]*/

%import common.SIGNED_NUMBER
%import common.WS
%import common.NEWLINE
%import common.ESCAPED_STRING
number: SIGNED_NUMBER
ETRUE: "true"
EFALSE: "false"
EIF: "if"
EELIF: "elif"
EELSE: "else"
EPLUS: "+"
EMINUS: "-"
EMULT: "*"
EDIVIDE: "/"
ELESS: "<"
EGREA: ">"
EEQU: "=="
EGREAE: ">="
ELESSE: "<="
ENOTEQ: "!="

EAND: "&"
EOR: "|"
EXOR: "xor"|"^"
ENOT: "not"|"!"
EIN: "in"|"<-"
ENOTIN: "not in"|"<->"
EMOD: "%"| "mod"
ELOR: "or"|"||"
ELAND: "and"|"&&"
ECOMPLEMENT: "~"
COMMENT: "#" /[^\n]/*


%ignore WS
%ignore COMMENT